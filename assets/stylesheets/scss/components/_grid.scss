/* ==========================================================================
   Grid
   ========================================================================== */

/**
 * Loosely based on:
 * - https://github.com/necolas/griddle
 * - http://necolas.github.io/griddle/ <= EXAMPLE
 *
 * Browser support:
 * - Google Chrome
 * - Firefox
 * - Safari
 * - Opera
 * - Internet Explorer 8+
 *
 * Example HTML:
 * <div class="Grid">
 *     <div class="Grid__cell u-size1of2--compact"></div>
 *     <div class="Grid__cell u-size1of2--compact"></div>
 *     <div class="Grid__cell u-size1of2--compact"></div>
 *     <div class="Grid__cell u-size1of2--compact"></div>
 * </div>
 *
 * <div class="Grid Grid--center">
 *     <div class="Grid__cell u-size1of2"></div>
 *     <div class="Grid__cell u-size2of3"></div>
 * </div>
 */

$grid-direction: left !default; // switch to 'right' for rtl

/* Grid core
   ========================================================================== */

/**
 * Grid container
 * Must only contain `.Grid` or `.Grid-cell` components as children.
 *
 * 1. Adjustment for child element margins.
 * 2. Ensure consistent default alignment/
 * 3. Remove inter-unit whitespace that appears between `inline-block` child
 *    elements. Work for all non-monospace font-families.  If you're using a
 *    monospace base font, you will need to set the `grid` font-family to
 *   `sans-serif` and then redeclare the monospace font on the `grid__cell`
 *    objects.
 * 4. Protect against WebKit bug with optimizelegibility.
 */

.Grid {
	display: block;
	padding: 0;
	margin: 0 -.5 * $grid-gutter; /* 1 */
	text-align: $grid-direction; /* 2 */
	letter-spacing: -0.31em; /* 3 */
	text-rendering: optimizespeed; /* 4 */

	@if $oldie {
		margin-right: percentage((-.5 * $grid-gutter)/$break-large);
		margin-left: percentage((-.5 * $grid-gutter)/$break-large);
	}
}

// .g, .grid { margin-left: -percentage(($grid-gutter)/$break-large); }

/**
 * Opera hack
 */

// .opera:-o-prefocus,
// .Grid {
// 	word-spacing: -0.43em; /* 3 */
// }

/**
 * Child `Grid` object adjustments
 * Used for more complex fixed-fluid hybrid grids.
 */

.Grid > .Grid {
	overflow: hidden;
	margin-right: 0;
	margin-left: 0;
}

/**
 * Grid units
 * No explicit width by default. Apply `.unit-x-y` classes.
 *
 * 1. Fundamentals of the non-float grid layout mechanism.
 * 2. Apply grid gutter.
 * 3. Controls vertical positioning of units.
 * 4. Keeps content correctly aligned with the grid direction.
 * 5. Reset text defaults.
 */

.Grid-cell {
	width: 100%;
	display: inline-block; /* 1 */
	margin: 0;
	padding: 0 .5 * $grid-gutter; /* 2 */
	vertical-align: top; /* 3 */
	text-align: $grid-direction; /* 4 */
	letter-spacing: normal; /* 5 */
	word-spacing: normal; /* 5 */
	text-rendering: auto; /* 5 */

	@if $oldie {
		padding-right: percentage((.5 * $grid-gutter)/$break-large);
		padding-left: percentage((.5 * $grid-gutter)/$break-large);
	}
}

/* Grid modifiers
   ========================================================================== */

/**
 * Modifier: horizontally center all grid units
 * Allows for automatic unit centering irrespective of the number of
 * units in the grid.
 */

.Grid--center {
	text-align: center;
}

/**
 * Modifier: align horizontally all grid units to the left
 */

.Grid--left {
	text-align: left;
}

/**
 * Modifier: align horizontally all grid units to the right
 */

.Grid--right {
	text-align: right;
}

/* Grid cell modifiers
   ========================================================================== */

/**
 * Modifier: horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `grid` object.
 */

.Grid-cell--center {
	display: block;
	margin: 0 auto;
}

/**
 * Modifier: align horizontally one unit to the left
 * Set a specific unit to be horizontally on the left. Doesn't affect
 * any other units. Can still contain a child `grid` object.
 */

.Grid-cell--left {
	display: block;
	margin-right: auto;
}

/**
 * Modifier: align horizontally one unit to the right
 * Set a specific unit to be horizontally on the right. Doesn't affect
 * any other units. Can still contain a child `grid` object.
 */

.Grid-cell--right {
	display: block;
	margin-left: auto;
}

/* Responsive sizes
   ========================================================================== */

/* Small and up */

@include grid-sizes("small", 2); // .u-size1of2--compact, etc.
@include grid-sizes("small", 3); // .u-size1of3--compact, etc.

/* Compact and up */

@include grid-sizes("compact", 2); // .u-size1of2--compact, etc.
@include grid-sizes("compact", 3); // .u-size1of2--compact, etc.
@include grid-sizes("compact", 4); // .u-size1of2--compact, etc.

/* Medium and up */

@include grid-sizes("medium", 4); // .u-size1of4--medium, etc.

/* Large and up */

@include breakpoint("large") { // Golden 4 column set
	.u-sizeGoldenCol1of4--large {
		width: grid-span(1, 1, ratio($golden, 4, "large")) !important;
		@if $oldie { width: grid-span(1, 1, ratio($golden, 4, 'large')) - (percentage(($grid-gutter)/$break-large) + .025%) !important; }
	}
	.u-sizeGoldenCol2of4--large {
		width: grid-span(1, 4, ratio($golden, 4, "large")) !important;
		@if $oldie { width: grid-span(1, 4, ratio($golden, 4, 'large')) - (percentage(($grid-gutter)/$break-large) + .025%) !important; }
	}
	.u-sizeGoldenCol3of4--large {
		width: grid-span(1, 3, ratio($golden, 4, "large")) !important;
		@if $oldie { width: grid-span(1, 3, ratio($golden, 4, 'large')) - (percentage(($grid-gutter)/$break-large) + .025%) !important; }
	}
	.u-sizeGoldenCol4of4--large {
		width: grid-span(1, 2, ratio($golden, 4, "large")) !important;
		@if $oldie { width: grid-span(1, 2, ratio($golden, 4, 'large')) - (percentage(($grid-gutter)/$break-large) + .025%) !important; }
	}
}
