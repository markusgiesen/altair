// --------------------------------------------------------------------------
// Typeset
// --------------------------------------------------------------------------
// Typografic scale: http://type-scale.com, http://modularscale.com
// Vertical rhythm (baseline): https://github.com/ianrose/typesettings

// Defaults
// --------------------------------------------------------------------------

$base-font-size:                16px !default;
$base-line-height:              1.5 !default;
$oldie:                         false !default;

// Font size
// --------------------------------------------------------------------------

@function rhythm-font-size($size: $base-font-size) {
	// Return `font-size`...
	@if $oldie {
		// In px's for oldie (fallback)
		@return $size + 0px;
	}
	@else {
		// Or in rem's for the rest
		@return $size / $base-font-size + 0rem;
	}
}

// Line height
// --------------------------------------------------------------------------

@function rhythm-line-height($size: $base-font-size, $lines: 1, $base-line-height: $base-line-height) {
	// Return unitless `line-height` for a given font-size, while respecting
	// the vertical rhythm (as long as `$lines` is an integer).
	// @return $lines * (ceil($size / $base-line-height) * ($base-line-height / $size));
	// @return ceil($size / $base-line-height) * $base-line-height * $lines;
	@return ceil($size / ($base-line-height * $base-font-size)) * ($base-line-height * $base-font-size / $size) * $lines;
}

// Base rhythm font
// --------------------------------------------------------------------------
// Generates procentual base font sizes for the different breakpoints.
// Include in html or body element like this: @include base-font($base).

@mixin base-font($base-font-sizes: $base) {

	// Start `$count`
	$count: 1;

	// Check if `$base` is a *fancy* Sass map (and not just a pixel value)
	@if type-of($base-font-sizes) == map {

		// Loop through each breakpoint in the base font size map...
		@each $breakpoint, $value in $base-font-sizes {

			// Get font size value for each break
			$size: map-get($base-font-sizes, $breakpoint);

			// If first `$breakpoint` (mobile first)...
			@if $count == 1 {
				// Output font-size and line-height
				font-size: $size;
				line-height: $base-line-height;
			}
			// For every other declared `$breakpoint`...
			@else {
				// Output font-size utilizing the breakpoint mixin
				@include breakpoint($breakpoint) {
					font-size: $size;
				}
			}
			// Update `$count`
			$count: $count + 1;
		}
	}
}

// Rhythm font scale
// --------------------------------------------------------------------------
// Generates font size, line height, and trailing and leading spaces (optionally).

@mixin rhythm-font($size: $base-font-size, $leader: 0, $trailer: 0, $lines: 1) {

	// Start `$count`
	$count: 1;

	// Check if `$size` is a *fancy* Sass map (and not just a pixel value)...
	@if type-of($size) == map {

		// Loop through each breakpoint in the font size map...
		@each $breakpoint, $property in $size {

			// Get font size, lines, leader and trailer values for each break
			$size: if(map-get($property, size), map-get($property, size), $base-font-size);
			$lines: if(map-get($property, lines), map-get($property, lines), $lines);
			$leader: if(map-get($property, leader), map-get($property, leader), $leader);
			$trailer: if(map-get($property, trailer), map-get($property, trailer), $trailer);

			// If first `$breakpoint` (mobile first)...
			@if $count == 1 {
				// Directly call the different font functions
				@if $trailer != 0 { margin-bottom: rhythm($trailer); }
				@if $leader != 0 { padding-top: rhythm($leader); }
				font-size: rhythm-font-size($size);
				line-height: rhythm-line-height($size, $lines);
			}
			// For every other listed `$breakpoint`...
			@else {
				// Output rhythm font-size and line-height utilizing the breakpoint mixin
				@include breakpoint($breakpoint) {
					@if $trailer != 0 { margin-bottom: rhythm($trailer); }
					@if $leader != 0 { padding-top: rhythm($leader); }
					font-size: rhythm-font-size($size);
					line-height: rhythm-line-height($size, $lines);
				}
			}
			// Update `$count`
			$count: $count + 1;
		}
	}
	// Oh, `$size` is *just* a pixel value...
	@else {
		// Jus output rhythm font-size and line-height (with MQ's, etc.)
		@if $trailer != 0 { margin-bottom: rhythm($trailer); }
		@if $leader != 0 { padding-top: rhythm($leader); }
		font-size: rhythm-font-size($size);
		line-height: rhythm-line-height($size, $lines);
	}
}
