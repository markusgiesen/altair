// --------------------------------------------------------------------------
// Gradients
// --------------------------------------------------------------------------

// Normal gradients
// --------------------------------------------------------------------------
// (1) Always set a $position, e.g.:
//       left, right, left top, center, 60% 40%, 45deg, etc.
// (2) When $radial is true, a 'center' $position is most of the time what you want
// (3) Define your list of $colors (in variables.scss) *with* or *without* procentual
//     color stops when using only *2* colors, but always define procentual colors
//     stopswhen defining more than 2 colors, e.g.:
//       $gradient-colors: $color-1 0%, $color-2 25%, $color-3 30%, $color-4 100%

@mixin gradient($position, $colors, $radial: false) {
	$colors: if(type-of($colors) != 'list', compact($colors), $colors);

	@if $radial == 'radial' {
		background-image: radial-gradient($position, ellipse cover, $colors); // The standard
	}
	@else {
		@if $position == 'left' {
			background-image: linear-gradient(to right, $colors); // The standard
		}
		@if $position == 'right' {
			background-image: linear-gradient(to left, $colors); // The standard
		}
		@if $position == 'top' {
			background-image: linear-gradient(to bottom, $colors); // The standard
		}
		@if $position == 'bottom' {
			background-image: linear-gradient(to top, $colors); // The standard
		}
	}
}

// Striped (or rainbow) gradients
// --------------------------------------------------------------------------
// By Jina Bolton and Eric Meyer: http://codepen.io/jina/pen/iosjp
// --------------------------------------------------------------------------
// (1) Define list of $colors (best in variables.scss) *without* color stops, e.g.
//       $stripe-colors: $stripe-color-1, $stripe-color-2, $stripe-color-3, $stripe-color-4
// (2) Always set a $position, e.g.:
//       left, right, top, left top, 45deg, etc.

@mixin stripes($position, $colors) {
	$colors: if type-of($colors) != 'list', compact($colors), $colors;
	$gradient: ();
	$width: 100% / length($colors);

	@for $i from 1 through length($colors) {
		$pop: nth($colors,$i);
		$new: $pop ($width * ($i - 1)), $pop ($width * $i);
		$gradient: join($gradient, $new, comma);
	}

	@if $position == 'left' {
		background-image: linear-gradient(to right, $gradient); // The standard
	}
	@if $position == 'right' {
		background-image: linear-gradient(to left, $gradient); // The standard
	}
	@if $position == 'top' {
		background-image: linear-gradient(to bottom, $gradient); // The standard
	}
	@if $position == 'bottom' {
		background-image: linear-gradient(to top, $gradient); // The standard
	}
}
