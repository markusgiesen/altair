// --------------------------------------------------------------------------
// Helpers and mixins
// --------------------------------------------------------------------------

// Add alphatransparency to any background or border color
// --------------------------------------------------------------------------

@mixin translucent-background($color: $white, $alpha: 1) {
	background-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
}

@mixin translucent-border($color: $white, $alpha: 1) {
	border-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
	background-clip: padding-box;
}

// Input placeholder text
// --------------------------------------------------------------------------
// Example:;
// @include input-placeholder {
//   color: #bfbfbf;
//   font-style: italic;
// }

@mixin input-placeholder {
	&:placeholder { @content; }
}

// Image 2x (HiDPI, Retina, Hi-res)
// --------------------------------------------------------------------------
// Specify a minimum Webkit device pixel ratio of 1.25 instead of 1.5, to serve
// 2x images to Android devices that are between 1 and 1.5x (like the Nexus 7).
// Firefox and Opera will respond to 1.5x on these devices, but Chrome will not.
// Specify min-resolution, which covers Firefox 19. Opera on Android also supports
// min-resolution, but Opera Mini does not support dppx, so the dpi unit is used.
//
// Link: http://j.mp/T9h80Z
//
// Usage:
//   .logo {
//     @include image-2x('logo-2x.png',100px,25px);
//     background: img-url('logo.png') no-repeat;
//   }

@mixin image-2x($image, $width, $height) {
	@media (-webkit-min-device-pixel-ratio: 1.25),
				(-o-min-device-pixel-ratio: 5/4),
						   (min-resolution: 120dpi) {
		background-image: img-url($image);
		background-size: $width $height;
	}
}

// Background clip for text
// --------------------------------------------------------------------------
// Based on Divya's pure CSS solution: http://j.mp/19BOwaF

@mixin clip-text($img-url, $fallback-color: $black) {
	color: $fallback-color;
	-webkit-text-fill-color: transparent;
	background: -webkit-linear-gradient(transparent, transparent), img-url($img-url) repeat;
	background: -o-linear-gradient(transparent, transparent);
	-webkit-background-clip: text;
}

// Rem output with px fallback
// --------------------------------------------------------------------------
// http://davidensinger.com/2013/03/using-rems-with-sass/
// Example usage:
// @include rem(font-size, 14px);
// @include rem(margin, 0 auto 1);
// @include rem(padding-bottom, 3%);

@mixin rem($property, $values) {
	// Create a couple of empty lists as output buffers.
	$font-size: $base-font-size;
	$px-values: ();
	$rem-values: ();
	// Loop through the $values list
	@each $value in $values {
		// For each property value, if it's in rem or px, derive both rem and
		// px values for it and add those to the end of the appropriate buffer.
		// Ensure all pixel values are rounded to the nearest pixel.
		@if $value == 0 or $value == 0px {
			// 0 -- use it without a unit
			$px-values: join($px-values, 0);
			$rem-values: join($rem-values, 0);
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
			// px value given - calculate rem value from font-size
			$new-rem-value: $value / $font-size;
			$px-values: join($px-values, round($value));
			$rem-values: join($rem-values, #{$new-rem-value}rem);
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
			// % value given - don't add px or rem
			$px-values: join($px-values, #{$value});
			$rem-values: join($rem-values, #{$value});
		} @else if $value == auto {
			// auto - don't add px or rem
			$px-values: join($px-values, auto);
			$rem-values: join($rem-values, auto);
		} @else {
			// unitless value - use those directly as rem and calculate the px-fallback
			$px-values: join($px-values, round($value * $font-size));
			$rem-values: join($rem-values, #{$value}rem);
		}
	}
	// output the converted rules
	@if $oldie {
		#{$property}: $px-values;
	}
	@else {
		#{$property}: $rem-values;
	}
}

// RGBa with RGB fallback for $oldie
// --------------------------------------------------------------------------
// Utilizes the `cs-mix` function of _color-schemer.scss
// Example usage:
// color: rgb-alpha($text-selection-color,.8);
// $color-background is optional and default so $page-color
// $color variable can be rgb(20,20,20), rgba(20,20,20,.8) (the `alpha` value
// of rgba is ignored), and #101010

@function rgb-alpha($color, $percent, $color-background: $page-color) {
	@if $oldie {
		@return cs-mix($color-background, $color, $percent);
	}
	@else {
		@return rgba($color, $percent);
	}
}
