// --------------------------------------------------------------------------
// Mixins
// --------------------------------------------------------------------------

// Defaults
// --------------------------------------------------------------------------

$oldie: false !default;

// Add alphatransparency to any background or border color
// --------------------------------------------------------------------------

@mixin translucent-background($color: $white, $alpha: 1) {
	background-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
}

@mixin translucent-border($color: $white, $alpha: 1) {
	border-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
	background-clip: padding-box;
}

// Gradient
// --------------------------------------------------------------------------
// (1) Always set a $position, e.g.:
//       left, right, left top, center, 60% 40%, 45deg, etc.
// (2) When $radial is true, a 'center' $position is most of the time what you want
// (3) Define your list of $colors (in variables.scss) *with* or *without* procentual
//     color stops when using only *2* colors, but always define procentual colors
//     stopswhen defining more than 2 colors, e.g.:
//       $gradient-colors: $color-1 0%, $color-2 25%, $color-3 30%, $color-4 100%

@mixin gradient($position, $colors, $radial: false) {
	$colors: if(type-of($colors) != 'list', compact($colors), $colors);

	@if $radial == 'radial' {
		background-image: radial-gradient($position, ellipse cover, $colors); // The standard
	}
	@else {
		@if $position == 'left' {
			background-image: linear-gradient(to right, $colors); // The standard
		}
		@if $position == 'right' {
			background-image: linear-gradient(to left, $colors); // The standard
		}
		@if $position == 'top' {
			background-image: linear-gradient(to bottom, $colors); // The standard
		}
		@if $position == 'bottom' {
			background-image: linear-gradient(to top, $colors); // The standard
		}
	}
}

// Striped (or rainbow) gradients
// --------------------------------------------------------------------------
// By Jina Bolton and Eric Meyer: http://codepen.io/jina/pen/iosjp
// --------------------------------------------------------------------------
// (1) Define list of $colors (best in variables.scss) *without* color stops, e.g.
//       $stripe-colors: $stripe-color-1, $stripe-color-2, $stripe-color-3, $stripe-color-4
// (2) Always set a $position, e.g.:
//       left, right, top, left top, 45deg, etc.

@mixin stripes($position, $colors) {
	$colors: if type-of($colors) != 'list', compact($colors), $colors;
	$gradient: ();
	$width: 100% / length($colors);

	@for $i from 1 through length($colors) {
		$pop: nth($colors,$i);
		$new: $pop ($width * ($i - 1)), $pop ($width * $i);
		$gradient: join($gradient, $new, comma);
	}

	@if $position == 'left' {
		background-image: linear-gradient(to right, $gradient); // The standard
	}
	@if $position == 'right' {
		background-image: linear-gradient(to left, $gradient); // The standard
	}
	@if $position == 'top' {
		background-image: linear-gradient(to bottom, $gradient); // The standard
	}
	@if $position == 'bottom' {
		background-image: linear-gradient(to top, $gradient); // The standard
	}
}

// Input placeholder text
// --------------------------------------------------------------------------
// Example:;
// @include input-placeholder {
//   color: #bfbfbf;
//   font-style: italic;
// }

@mixin input-placeholder {
	&:placeholder { @content; }
}

// Image 2x (HiDPI, Retina, Hi-res)
// --------------------------------------------------------------------------
// Specify a minimum Webkit device pixel ratio of 1.25 instead of 1.5, to serve
// 2x images to Android devices that are between 1 and 1.5x (like the Nexus 7).
// Firefox and Opera will respond to 1.5x on these devices, but Chrome will not.
// Specify min-resolution, which covers Firefox 19. Opera on Android also supports
// min-resolution, but Opera Mini does not support dppx, so the dpi unit is used.
//
// Link: http://j.mp/T9h80Z
//
// Usage:
//   .logo {
//     @include image-2x('logo-2x.png',100px,25px);
//     background: img-url('logo.png') no-repeat;
//   }

@mixin image-2x($image, $width, $height) {
	@media (-webkit-min-device-pixel-ratio: 1.25),
				(-o-min-device-pixel-ratio: 5/4),
						   (min-resolution: 120dpi) {
		background-image: img-url($image);
		background-size: $width $height;
	}
}

// Background clip for text
// --------------------------------------------------------------------------
// Based on Divya's pure CSS solution: http://j.mp/19BOwaF

@mixin clip-text($img-url, $fallback-color: $black) {
	color: $fallback-color;
	-webkit-text-fill-color: transparent;
	background: -webkit-linear-gradient(transparent, transparent), img-url($img-url) repeat;
	background: -o-linear-gradient(transparent, transparent);
	-webkit-background-clip: text;
}
