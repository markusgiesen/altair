<?php
function imgrid($images, $width, $margin, $images_per_row, $crop_last=true, $from_kirbytext=false, $hd=false, $caption=false) {
	$imgrid = new imgrid($images, $width, $margin, $images_per_row, $crop_last, $from_kirbytext, $hd, $caption);
	$imgrid->grid();
}

class imgrid {
	var $images = array();
	var $gridWidth = 0;
	var $gridMargin = 0;
	var $originals = array();
	var $crop_last = true;
	var $from_kirbytext = false;
	var $hd = false;
	var $caption = false;
	var $imgWidth = 0;
	var $imgHeight = 0;

	function __construct($images, $width, $margin, $images_per_row, $crop_last, $from_kirbytext, $hd, $caption) {
		$this->images = $images;
		$this->width = $width;
		$this->gridMargin = $this->calcPx($margin); // calculate pixel value from the given margin in pct
		$this->gridWidth = $width + $this->gridMargin;
		$this->crop_last = $crop_last;
		$this->from_kirbytext = $from_kirbytext; // is true if this is called from kirbytext
		$this->hd = $hd;
		$this->caption = $caption;

		// prevent division by zero
		$images_per_row = ($images_per_row > 1)? $images_per_row : 2;

		// heuristic base image width
		$this->imgWidth = (int) ($this->gridWidth / ($images_per_row - 1));

		// assuming most pictures have a proportion of 3:2
		$this->imgHeight = (int) ($this->imgWidth / 3 * 2);
	}

	/**
	 * This function will generate the grid's rows. Therefore it uses
	 * a rough estimation generated by fitWidth() and fitHeight() to
	 * calculate the number of images per row.
	**/
	public function grid() {
		$row = array();
		$rowWidth = 0;
		$i = 0;

		$images = $this->images;
		$container = 100 + $this->calcPct($this->gridMargin);

		echo '<figure class="ImageGrid" style="width: '.$container.'%; margin-left: -'.$this->calcPct($this->gridMargin).'%;">';

		foreach($images as $img) {
			$this->originals[$i] = clone $img;

			// scale the image to nice base size
			if ($this->getOrientation($img) < 1) {
				$img->fitWidth($this->imgWidth, true);
			} else {
				$img->fitHeight($this->imgHeight, true);
			}

			$rowWidth = $rowWidth + $img->width() + $this->gridMargin;
			$row[$i] = $img;

			// if called from kirbytext, the images are in an array, so use other syntax to count
			if($this->from_kirbytext){
				$num = count($images) - 1;
			}else{
				$num = $images->count() - 1;
			}

			// begin new row if current one is overfull
			if ($rowWidth-$this->gridMargin >= $this->gridWidth || $i == $num) {
				$this->fitRow($row, $rowWidth);
				$row = array();
				$rowWidth = 0;
			}

			$i++;
		}

		if(isset($this->caption)){
			echo '<figcaption>'. $this->caption .'</figcaption>';
		}

		echo '</figure>';

	}

	/**
	 * This function will make the images of a row the same height
	 * and it will scale all images so that they exactly fit in a row
	 *
	 * @param $row
	 *        Array of image objects that will fill a row. The row's width should
	 *        be equal or larger compared to the grid's width. Otherwise it will
	 *        assume that this is the last row of the grid and will just adjust
	 *        the images' height.
	 * @param $rowWidth
	 * 				The width of all images together
	**/
	private function fitRow($row, $rowWidth) {
		$margin = (count($row)) * $this->gridMargin;

		if ($rowWidth >= 0.9 * $this->gridWidth)
			$scaleFactor = ($this->gridWidth - $margin) / ($rowWidth - $margin);
		else {
			$scaleFactor = 1;
		}

		$fixedHeight = 0;
		$realWidth = 0;
		$i = 0;

		// scale images down, so that they will fit
		foreach ($row as $key => $img) {
			$newWidth = (int) ($img->width() * $scaleFactor);
			$img->fitWidth($newWidth, true);

			// create fixed height so that every image has the same height
			if ($fixedHeight > 0)
				$img->info()->height = $fixedHeight;
			else
				$fixedHeight = $img->height();

			// last element will be cropped to pixel-perfect size
			if ($i == count($row)-1 && ($scaleFactor < 1 || $this->crop_last)) {
				$fittedWidth = $this->gridWidth - $margin - $realWidth;
				$img->info()->width = $fittedWidth;
			}

			$realWidth = $realWidth + $img->width();
			$i++;
		}

		$this->printRow($row);
	}

	/**
	 * Prints a row.
	 *
	 * @param $row
	 *        An array of image objects
	**/
	private function printRow($row) {

		$i = 0;

		foreach ($row as $key => $img) {

			$options = array(
					'width' => $img->width(),
					'height' => $img->height(),
					'crop' => 'true',
					'hd' => $this->hd
				);

			// styling for the fluid figures
			$styling = 'width: '.$this->calcPct($img->width()).'%; margin: 0 0 '.$this->calcPct($this->gridMargin).'% '.$this->calcPct($this->gridMargin).'%;';

			// if this is the first figure in a row, clear it
			($i==0) ? $clear = ' ImageGrid-item--clear' : $clear = '' ;

			// *with* anchor to original image
			// echo '<a class="ig__item'.$clear.'" style="'.$styling.'" href="'.$this->originals[$key]->url().'" class="fancybox" rel="gallery">';
			// echo '<img src="'.thumb($this->originals[$key], $options, false).'"/>';
			// echo '</a>';

			// *without* anchor to original image
			echo '<img class="ImageGrid-item'.$clear.'" style="'.$styling.'" src="'.thumb($this->originals[$key], $options, false).'" alt=""/>';

			$i++;
		}
	}

	/**
	 * Calculate percentage from pixel, returns the percentage integer without % character
	 *
	 * @param $px
	 *        The pixel value (integer)
	**/
	private function calcPct($px) {
		$pct = round(($px / $this->gridWidth) * 100, 6); // round to 6 figures after the decimal
		return $pct;
	}

	/**
	 * Calculate pixel from percentage, returns the pixel integer without px chars
	 *
	 * @param $pct
	 *        The percentage (integer)
	**/
	private function calcPx($pct) {
		$px = round(($pct / 100) * $this->width, 6); // round to 6 figures after the decimal, even for pixels to leave rounding to the browser (fix IE7)
		return $px;
	}

	/**
	 * @param $img
	 *        the image object
	 * @return
	 *        0 for landscape
	 *        1 for portrait
	**/
	private function getOrientation($img) {
		return ($img->width() > $img->height())? 0 : 1;
	}
}
?>
